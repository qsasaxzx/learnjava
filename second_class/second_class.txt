1.final과 static
●final
 상수를 표현하기 위한 예약어 
변수, 메소드, 클래스 앞 선언문에 사용한다.

1.변수에 사용 
-상수값에 사용한다.
-변수를 선언과 동시에 초기화 하며 이후에 값을 수정할 수 없다.
final int count = 10;

2.메소드에 사용 
-오버라이딩이 불가
-상속받은 그대로 사용해야함
public final String getName(){
	return name;
}

3. 클래스에 사용 
-상속이 불가능
-subclass를 만들 수 없다.

변수 final은 값이 일정한 변수에 대해서 선언한다
ex) 경로, 폴더명, 컬럼명 등
클래스, 메소드 final은 각각 상속 오버라이딩을 금지하고 싶을 경우에 사용한다.

●static
static이 붙는 변수는 클래스변수 , 그렇지 않을 경우 인스턴스 변수라고 한다.
인스턴스 변수는 객체가 생성될 때마다 각 변수들이 생기지만 클래스변수는 여러 객체들이 하나의 변수를 공유한다,
클래스가 로딩되는 과정에서 한번 메모리에 올라간다.

특징
-클래스 설계시 공통적으로 사용되는 인스턴스에 static을 붙인다.
-static이 붙은 변수는 인스턴스를 생성하지 않아도 사용 할 수있다.
-static 메소드는 인스턴스 변수를 사용할 수 없다.

장단점
-메모리를 효율적으로 사용할 수 있다.(고정메모리)
-속도가 빠르다(객체를 생성하지 않고도 변수를 사용가능)
-무분별한 사용시에 메모리 릭의 원인이 된다.(변수의 사용이 끝나도 메모리에 남아있다.)

2.VO와 DTO
●VO(Value Object)
vo는 dto와 비슷한 개념이지만 vo는 read only의 속성을 가진다 또한 관계형 데이터베이스의 레코드애 되는 자바 클래스 이다.
각 데이터베이스의 필드 값을 getter,setter 로 조작하는 구성으로 
특성은 대체로 불변성을 가지고 equals로 비교할 때 객체의 모든값을 비교해야함
vo를 사용하게 되면 네트워크 트래픽이 감소된다는 장점이 있는 반면
클래스의 선언을 위해 많은 코드가 필요한 단점이 있다.
●DTO(Data Transfer Object)
일종의 데이터 전송객체 vo가 같은 레벨에서의 데이터 관리가 목적이라면 dto는 다른 레벨에 데이터를 전달하는 객체이다 
vo와 마찬가지로 getter와 setter로 구성된다.

구성은 이렇다
public class Data{
	private String data
	private Int code
	public String getData(){ return data;}
	public Int getCode(){ return code;}
	public String setData(String data){this.data = data;}
	public Int setCode(Int code){ this.code = code;}
}

데이터가 가변속성일 경우 DTO를 사용하고 불변일경우 VO를 사용한다.
또 데이터가 다른 레벨로 전달되야 하는경우는 DTO를 사용한다.


3.생성자
●생성자란
클래스는 초기화를 위해 생성자라는 틀별한 코드 블록을 가진다.
생성자는 클래스가 new표현식에 의해 인스턴스화 되어 객체를 생성할 때
초기화를 위해 사용하는 코드 블록이다.
public className(){	} 이런 형식
이러한 생성자는 new연산자를 통해 객체가 생성된다 
className a = new ClassName(); >>a객체 생성
●생성자의 특징 
메소드의 형태를 가지지만 메소드가 아니라 반환값이 없고 이름은 클래스의 이름과 동일해야 한다. 
생성자의 파라미터 리스트는 일반 메소드와 동일하게 적용된다. 메소드의 오버로딩처럼 여러개의 생성자를 가질 수 있다.
●this와super
생성자가 여려개일 때 다른 생성자를 호출할수 있는데 이때 사용되는 코드가 this()이다.
이는 오직 생성자 안에서만 호출이 가능하고 맨 첫줄에 한번만 호출 할 수있다.
super또한 생성자 안에서 첫줄에서만 호출이 가능하지만 클래스안의 생성자가 아니라 부모 클래스의 생성자를 호출한다.
this() 는 파라미터가 없는 생성자의 호출 형식이고 
this(파라미터) 파라마터가 있는 생성자는 중괄호안에 해당 파라미터를 넣어준다.
●기본 생성자
-클래스에 생성자가 없는 경우 기본 생성자가 자동으로 추가된다.(생성자가 하나라도 있으면 추가되지 않는다.) 기본 생성자는 파라미터가 없고 내용은 부모생성자를 호출하는 super()만 포함되어 있다. 
또 기본 생성자의 접근제한은 클래스의 접근제한을 따라간다.
-모든 생성자는 맨 첫줄에 this 또는 super가 반드시 들어가야 된다.
명시적으로 쓰지않을경우에 super() 가 컴파일 시에 자동으로 추가된다.


4.싱글톤패턴 관리기법
●싱글톤 패턴
애플리케이션이 시작될 때 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 인스턴스를 만들어 사용하는 디자인패턴.

생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나고 최초 생성 이후에 호출된 생성자는 최초에 생성한 객체를 반환한다. (자바에선 생성자를 private로 선언해서 생성 불가하게 하고 getInstance()로 받아쓰기도 함)
=> 싱글톤 패턴은 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴이다.
(인스턴스가 필요 할 때 똑같은 인스턴스를 만들어 내는 것이 아니라, 동일(기존) 인스턴스를 사용하게함)

●싱글톤 패턴의 장점

고정된 메모리 영역을 얻으면서 한번의 new로 인스턴스를 사용하기 때문에 메모리 낭비를 방지할 수 있음
공통된 객체를 여러개 생성해서 사용해야하는 상황에서 많이 사용.
(쓰레드풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객체등)
인스턴스가 절대적으로 한개만 존재하는 것을 보증하고 싶을 경우 사용.
두 번째 이용시부터는 객체 로딩 시간이 현저하게 줄어 성능이 좋아진다.






●싱글톤 관리 기법

1. Eager initialization (이른 초기화 방식)

먼저 Singleton의 가장 기본적인 Eager initialization 방식입니다. 먼저 클래스 내에 전역변수로 인스턴스 변수를 생성하고 private static을 사용하여 인스턴스화에 상관없이 접근이 가능하면서 동시에
 private 접근 제어 키워드를 사용해 Eager initialization.instance 로 바로 접근 할 수 없도록 합니다. 또 생성자에도 private 접근 제어 키워드를 붙여 다른 클래스에서 new EagerInitialization(); 방식으로 새로운 
인스턴스를 생성하는 것을 방지합니다.

오로지 정적메서드인 getInstance() 메서드를 이용해서 인스턴스를 접근하도록 하여 유일무이한 동일 인스턴스를 사용하는 기본 싱글톤(Singleton) 원칙을 지키게합니다.

이른 초기화 방식은 싱글톤 객체를 미리 생성해 놓는 방식입니다. 항상 싱글톤 객체가 필요하거나 객체 생성비용이 크게 들어가지 않는 경우에 사용합니다.
 private static EagerInitialization instance = new EagerInitialization();//객체 생성
    //생성자
    private EagerInitialization() {}

    //인스턴스 리턴
    public static EagerInitialization getInstance() {
        return instance;
    }
장점 : static으로 생성된 변수에 싱글톤 객체를 선언했기 때문에 클래스 로더에 의해 클래스가 로딩 될 때 싱글톤 객체가 생성됩니다. 또 클래스 로더에 의해 클래스가 최초 로딩 될 때 객체가 생성됨으로 Thread-safe합니다.

단점 : 싱글톤객체 사용유무와 관계없이 클래스가 로딩되는 시점에 항상 싱글톤 객체가 생성되고, 메모리를 잡고있기 때문에 비효율적일 수 있다. 


2. Lazy initialization (늦은 초기화 방식)

Eager initialization (이른 초기화방식)과 정반대로 클래스가 로딩되는 시점이 아닌 클래스의 인스턴스가 사용되는 시점에서 싱글톤 인스턴스를 생성합니다. 
즉 사용시점까지 싱글톤 객체 생성을 미루기 때문에 사용하기 전까지 메모리를 점유하지 않습니다.
getInstance() 메서드안에서 instance가 null 인 경우에만 new LazyInitialization(); 선언하였습니다. 


    private static LazyInitialization instance;
 
    private LazyInitialization(){}
     
    public static LazyInitialization getInstance(){
        if(instance == null){
            instance = new LazyInitialization();
        }
        return instance;
    }
 

장점 : 싱글톤 객체가 필요할 때 인스턴스를 얻을 수 있습니다. Eager initialization 방식에 단점을 보완할 수 있습니다.(메모리 누수 방지)

단점 : 만약 multi-thread 환경에서 여러 곳에서 동시에 getInstance()를 호출할 경우 인스턴스가 두번 생성될 여지가 있습니다. 


3.Thread safe Lazy initialization (스레드 안전한 늦은 초기화)

Lazy initialization 방식에서 thread-safe하지 않다는 단점을 보완하기 위해 멀티스레드에서 스레드들이 동시접근하는 동시성을 synchronized 키워드를 이용해 해결합니다.
 
package SingleTonExample;
 
public class ThreadSafeLazyInitialization{
 
    private static ThreadSafeLazyInitializationinstance;
 
    private ThreadSafeLazyInitialization(){}
     
    public static synchronized ThreadSafeLazyInitializationgetInstance(){
        if(instance == null){
            instance = new ThreadSafeLazyInitialization();
        }
        return instance;
    }
 
}
 

장점 : 위에서 말했듯 Lazy initialization 방식에서 thread-safe하지 않은 점을 보완한다. 

단점 : synchronized 키워드를 사용할 경우 자바 내부적으로 해당 영역이나 메서드를 lock, unlock 처리하기 때문에 내부적으로 많은 cost가 발생한다. 따라서 많은 thread 들이 getInstance()를 호출하게 되면 프로그램
 전반적인 성능저하가 발생한다.

4. Initialization on demand holder idiom (holder에 의한 초기화)

이 방법은 클래스안에 클래스(Holder)를 두어 JVM의 Class Loader 매커니즘과 Class가 로드되는 시점을 이용한 방법입니다. Lazy initialization 방식을 가져가면서 Thread간 동기화문제를 동시에 해결할 수 있습니다. 

중첩클래스 Holder는 getInstance 메서드가 호출되기 전에는 참조 되지 않으며, 최초로 getInstance() 메서드가 호출 될 때 클래스 로더에 의해 싱글톤 객체를 생성하여 리턴합니다. 
우리가 알아둬야 할 것은 holder 안에 선언된 instance가 static이기 때문에 클래스 로딩 시점에 한번만 호출된다는 점을 이용한것이다. 또 final을 써서 다시 값이 할당되지 않도록 합니다.


public class InitializationOnDemandHolderIdiom {
 
    private InitializationOnDemandHolderIdiom(){}
     
    private static class SingleTonHolder{
        private static final InitializationOnDemandHolderIdiom instance = new InitializationOnDemandHolderIdiom();
    }
     
    public static InitializationOnDemandHolderIdiom getInstance(){
        return SingleTonHolder.instance;
    }
}
 







5.상속의 기본 , 사용법 , 사용 이유
●상속
현실 세계에서 부모님이 자식들에게 재산을 물려주는 것과 비슷하다. 차이라고 하면 자식(클래스)이 상속받고 싶은 부모(클래스)를 선택해서 물려받는다. 
이때 상속받는 클래스를 자식 클래스, 하위 클래스 또는 서브 클래스라고 부른다. 상속을 해주는 클래스를 부모 클래스, 상위 클래스 또는 슈퍼 클래스라고 한다.
 자식 클래스가 부모 클래스로부터 상속을 받게 되면 부모 클래스의 필드와 메서드를 물려받게 된다. 단, 접근제어자가 private을 갖는 필드나 메소드는 상속이 불가하고, 
패키지가 다를 경우 접근제어자가 default인 경우도 상속이 불가하다.

●사용법

상속받을 자식 클래스 뒤에 extends 키워드를 사용하고 부모 클래스를 적어주면 된다.
 그리고 자바에서는 자식 클래스가 여러 부모로부터 다중 상속을 받는 것은 불가능하다. 즉, 1개의 부모 클래스로부터의 단일 상속만 허용된다.  하지만 부모 클래스는 여러 개의 자식 클래스에게 상속이 가능하다.
class A {
	String aField = "클래스 A 필드";
	public void aMethod() {
		System.out.println(aField);
	}
}

class B extends A {
	String bField = "클래스 B 필드";
	public void bMethod() {
		System.out.println(aField); // 부모 클래스 필드 사용
		System.out.println(bField); // 본인 클래스 필드 사용
	}
}


●사용이유 장점

1.중복된 코드를 줄일 수 있다.
2.유지 보수가 편리하며, 통일성이 있다. 
3.다형성을 구현할 수 있다.

