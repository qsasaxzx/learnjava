1) interface
인터페이스

인터페이스의 사전적의미는 다음과 같다.
사물 간 또는 사물과 인간 간의 의사소통이 가능하도록 일시적 혹은 영속적인 접근을 목적으로 만들어진 물리적, 가상적 매개체(접점)를 의미한다. 
대표적인 인터페이스의 예로는 USB포트가 물리적 세계의 인터페이스라고 할 수 있다.
USB포트의 규격만 알면 어떤 기기도 만들 수 있다. 마우스, 키보드, 저장장치 등의 연결이 가능하다.

인터페이스(JAVA)

자바에세 인터페이스와 상속은 사용 방법은 비슷하지만, 용도는 완전히 다르다. 상속이 상위 클래스의 기능을 하위 클래스가 물려 받는 것이라고 한다면, 인터페이스는 하위 클래스에 특정한 메소드가 반드시 존재하도록 강제한다. 

클래스를 선언 할 때는 class를 사용하지만 인터페이스는 interface를 사용한다.
또 상속은 extends를 사용하지만 인터페이스는 implements를 사용한다.

인터페이스의 규칙

1. 하나의 클래스가 여러개의 인터페이스를 구현 할 수 있다. 
2. 인터페이스도 상속이 된다.
3. 인터페이스의 맴버는 반드시 public이다.

인터페이스의 사용

협업자 상호간에 구체적인 약속을 정의하는 것과 같다. 
이 안터페이스를 구현하는 클래스는 다 인터페이스에 선언되어있는 변수와 메소드를 이용해서 같은 틀을 가지고 구현을 하라는 약속이다.
상속을 이용하여 오버라이딩을 하는 것 인터페이스를 이용하여 오버라이딩을 하는 것은 
비슷한 기능을 하지만 구현이 강제 된다는 것과 다중 상속이 가능한점이 차이 이다.

추가로 다형성의 기능도 제공한다.








2) 다형성
프로그램 언어의 다형성은 그 프로그래밍 언어의 자료형 체계의 성질을 나타내는 것으로, 프로그램 언어의 각 요소들(상수, 변수, 식, 오브젝트, 함수, 메소드 등)이 다양한 자료형(type)에 속하는 것이 허가되는 성질을 가리킨다.
자바에서 다형성을 지원하기 위해 제공하는 기능들이 대표적으로 오버로딩, 오버라이딩, 인터페이스, 상속 등이있다.
상속의 다형성은 다음과 같다.

class A{
    public String x(){return "x";}
}
class B extends A{
    public String y(){return "y";}
}
public class PolymorphismDemo1 {
    public static void main(String[] args) {
        A obj = new B();
        obj.x();
        obj.y();  //실행되지않는다. 클래스 A타입의 객체로 선언되었기 떄문에 B의 메소드를 쓸수 없다. 반대로 B타입의 클래스 타입으로 선언했다면 쓸 수 있다.
    }
}

이와같이 클래스 B는 클래스 A타입으로도 쓸 수 있다.

인터페이스도 이와 마찬가지 이다. 인터페이스 형태의 자료형으로 선언이 가능하고 다중상속이 가능한 만큼 여러 가지 자료형을 가질 수 있다.













3) mutable , immutable 객체

●mutable
mutable 객체는 객채 내의 특정 요소를 변경 할 수 있는 객체를 mutable 객체라고 한다.
List, ArrayList, HashMap 등의 컬렉션들은 대표적인 mutable 객체라고 할 수 있다.

이값은 값을 수정할 때 참조값이 바뀌는 것이 아닌 생성된 객체 자체가 수정된다.

●immutable

 Immutable 변경이 불가능한 객체이며,만들어진 Immutable Class는 레퍼런스 타입의 객체이기 때문에 heap영역에 생성됩니다. 대표적인 immutable 객체로는 String, Boolean, Integer, Float, Long 등이 있다.

이러한 Immutable 객체들은 heap영역에서 변경불가능 한 것이지 재할당을 못하는 것은 아니다. 즉 String a = "aa"; 에서 a = "bb" 로 재할당이 가능하다.  a가 참조하고 있는 heap영역의 객체가 바뀌는 것이지
 heap영역에 있는 값이 바뀌는 것이 아니다.
좀 더 풀어말하면, a가 처음에 참조하고 있는 "aa"값이 "bb"로 변경되는 것이 아니라 아예 "bb"라는 새로운 객체를 만들고 그 객체를 a가 참조하게 하는 것 이렇게 했을 경우 "aa"값을 지니고있는 객체는 이제 그
 누구도 참조하고 있지 않는 객체가 된다.


장점 : 생성자, 접근메소드에 대한 방어 복사가 필요없습니다. 멀티스레드 환경에서 동기화 처리없이 객체를 공유할 수 있습니다.(Thread-safe) 불변이기 때문에 객체가 안전합니다.

단점 : 객체가 가지는 값마다 새로운 객체가 필요합니다. 따라서 메모리 누수와 새로운 객체를 계속 생성해야하기 때문에 성능저하를 발생시킬 수 있습니다.

불변객체는 멀티쓰레드시 유용 같은 객체에 접근하는 여러 요청에 변하지 않는 값을 유지할 수 있다.











4) IO Stream

자바에서는 바이트의 연속적인흐름을 스트림이라고 하는데 이 스트림의 목적지는 일반적으로 파일이나, 네트워크, 입출력장치 이다.
어떠한 장치(파일)에 읽거나 쓰고 싶을 때는 스트림을 생성한 뒤에 그 객체로 읽고 쓰는 작업을 할 수 있다. 크게 바이트 스트림과 문자스트림으로 나뉜다.

바이트 스트림은 바이트 단위로 입출력하는 클래스들이며 모든 클래스들은 InputStream과 OutputStream 추상클래스에서 상속된다.
int, double 같은 기본자료형 단위로 읽거나 쓰고 싶을 땐 DataInputStream과 DateOutputStream을 사용하고 파일단위로 작업을 하고 싶을때는 FileInputStream, FileOutputStream을 사용한다.


문자스트림은 문자단위로 입출력하는 클래스이다. 주로 유니코드를 사용한 문자들을 입출력 할 때 사용한다.  모든 클래스들은 Reader와 Write 추상클래스에서 파생된다.
문자스트림도 파일단위 작업을 요할때는 FileReader FileWriter 클래스를 이용한다.


또 문자스트림 바이트스트림 둘다 버퍼 클래스를 제공하여 더 효율적으로 데이터를 읽고 쓸 수 있다.



















5) Java Memory 와 Java version에 따른 String pool 운영 차이점

●string pool

String pool은 JVM이 각각의 고유한 string의 값(반드시 변하지 않는 값) 중에 하나의 복사본만 저장하기 위해 사용되는 memory이다.(불변객체 이므로)
기본적으로, string pool은 변하지 않는 string을 pool에 보관함으로써 프로그램 실행시 메모리를 절약할 수 있게 해준다. 응용프로그램 영역에서 여러 개
 인스턴스를 새로 만드는 대신 이미 존재하는 string의 인스턴스를 재사용할 수 있도록 spring pool에서 꺼내 할당한다.

●string pool의 응용
String a = “1”; //spring tool 적용
String aa  = new String(“1”); //미적용
String aaa = new String(“1”).intern(); //적용

이렇게 string pool에 등록된 string을 재사용한다면 메모리의 낭비없이 프로그래밍을 할 수 있다.


.●memory, version에 따른 차이

Java6까지 string constant pool의 위치는 Perm 영역이었다. Perm 영역에 위치하였던 게 Java7에서 Heap 영역으로 변경되었다. 
그 이유는 Perm 영역은 고정된 사이즈고 Runtime에 사이즈가 확장되지 않는다. Perm 영역의 사이즈를 늘릴 수는 있지만 어쨌거나 Runtime에 사이즈가 변경되는 것은 아니다. 
그래서 Java6까지는 String의 intern() 메서드를 호출하는 것은 OutOfMemoryException을 발생시킬 수 있고 그 부분을 컨트롤할 수 없었기 때문에 거의 사용하지 않는 것이 맞다.

그래서 Oracle의 엔지니어들이 Java7에서 Perm 영역이 아닌 Heap 영역으로 string pool의 위치를 변경하여 오류를 막고, 확장성이 좋게 변경되었다.

